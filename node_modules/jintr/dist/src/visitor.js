"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Visitor_instances, _Visitor_printError;
Object.defineProperty(exports, "__esModule", { value: true });
const map_1 = __importDefault(require("./map"));
const package_json_1 = __importDefault(require("../package.json"));
class Visitor {
    constructor(ast) {
        _Visitor_instances.add(this);
        this.scope = new Map();
        this.listeners = {};
        this.ast = ast;
    }
    /**
     * Starts interpreting the program.
     */
    run() {
        let result;
        for (const node of this.ast) {
            result = this.visitNode(node);
        }
        return result;
    }
    /**
     * Visits given node and executes it.
     */
    visitNode(node) {
        if (!node)
            return null;
        try {
            const target_node = (0, map_1.default)(node.type);
            return target_node.visit(node, this);
        }
        catch (err) {
            __classPrivateFieldGet(this, _Visitor_instances, "m", _Visitor_printError).call(this, node, err);
        }
    }
    /**
     * Gets the name of a node.
     * @param node - The target node.
     */
    getName(node) {
        if (node.type === 'Identifier')
            return node.name;
        else if (node.type === 'Literal')
            return node.value;
    }
    /**
     * Listens for node calls. Can be used to override default behavior or add new functionality.
     * @param node_name - The node to listen for.
     * @param listener - The callback function.
     */
    on(node_name, listener) {
        this.listeners[node_name] = listener;
    }
}
exports.default = Visitor;
_Visitor_instances = new WeakSet(), _Visitor_printError = function _Visitor_printError(node, err) {
    if (err.code === 'MODULE_NOT_FOUND') {
        console.warn(`Node ${node.type} not found!\nThis is a bug, please report it at ${package_json_1.default.bugs.url}.`);
    }
    else
        throw err;
};
